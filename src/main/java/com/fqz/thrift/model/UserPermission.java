package com.fqz.thrift.model;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class UserPermission implements org.apache.thrift.TBase<UserPermission, UserPermission._Fields>, java.io.Serializable, Cloneable, Comparable<UserPermission> {
	private static final long serialVersionUID = 1L;

private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserPermission");

  private static final org.apache.thrift.protocol.TField TENANT_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantDomain", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INSTANCE_EN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceEnName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("method", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserPermissionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserPermissionTupleSchemeFactory());
  }

  public String tenantDomain; // required
  public String userName; // required
  public String instanceEnName; // required
  public String method; // required
  public String url; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TENANT_DOMAIN((short)1, "tenantDomain"),
    USER_NAME((short)2, "userName"),
    INSTANCE_EN_NAME((short)3, "instanceEnName"),
    METHOD((short)4, "method"),
    URL((short)5, "url");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TENANT_DOMAIN
          return TENANT_DOMAIN;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // INSTANCE_EN_NAME
          return INSTANCE_EN_NAME;
        case 4: // METHOD
          return METHOD;
        case 5: // URL
          return URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TENANT_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("tenantDomain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTANCE_EN_NAME, new org.apache.thrift.meta_data.FieldMetaData("instanceEnName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METHOD, new org.apache.thrift.meta_data.FieldMetaData("method", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserPermission.class, metaDataMap);
  }

  public UserPermission() {
  }

  public UserPermission(
    String tenantDomain,
    String userName,
    String instanceEnName,
    String method,
    String url)
  {
    this();
    this.tenantDomain = tenantDomain;
    this.userName = userName;
    this.instanceEnName = instanceEnName;
    this.method = method;
    this.url = url;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserPermission(UserPermission other) {
    if (other.isSetTenantDomain()) {
      this.tenantDomain = other.tenantDomain;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetInstanceEnName()) {
      this.instanceEnName = other.instanceEnName;
    }
    if (other.isSetMethod()) {
      this.method = other.method;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
  }

  public UserPermission deepCopy() {
    return new UserPermission(this);
  }

  public void clear() {
    this.tenantDomain = null;
    this.userName = null;
    this.instanceEnName = null;
    this.method = null;
    this.url = null;
  }

  public String getTenantDomain() {
    return this.tenantDomain;
  }

  public UserPermission setTenantDomain(String tenantDomain) {
    this.tenantDomain = tenantDomain;
    return this;
  }

  public void unsetTenantDomain() {
    this.tenantDomain = null;
  }

  /** Returns true if field tenantDomain is set (has been assigned a value) and false otherwise */
  public boolean isSetTenantDomain() {
    return this.tenantDomain != null;
  }

  public void setTenantDomainIsSet(boolean value) {
    if (!value) {
      this.tenantDomain = null;
    }
  }

  public String getUserName() {
    return this.userName;
  }

  public UserPermission setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getInstanceEnName() {
    return this.instanceEnName;
  }

  public UserPermission setInstanceEnName(String instanceEnName) {
    this.instanceEnName = instanceEnName;
    return this;
  }

  public void unsetInstanceEnName() {
    this.instanceEnName = null;
  }

  /** Returns true if field instanceEnName is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceEnName() {
    return this.instanceEnName != null;
  }

  public void setInstanceEnNameIsSet(boolean value) {
    if (!value) {
      this.instanceEnName = null;
    }
  }

  public String getMethod() {
    return this.method;
  }

  public UserPermission setMethod(String method) {
    this.method = method;
    return this;
  }

  public void unsetMethod() {
    this.method = null;
  }

  /** Returns true if field method is set (has been assigned a value) and false otherwise */
  public boolean isSetMethod() {
    return this.method != null;
  }

  public void setMethodIsSet(boolean value) {
    if (!value) {
      this.method = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public UserPermission setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TENANT_DOMAIN:
      if (value == null) {
        unsetTenantDomain();
      } else {
        setTenantDomain((String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case INSTANCE_EN_NAME:
      if (value == null) {
        unsetInstanceEnName();
      } else {
        setInstanceEnName((String)value);
      }
      break;

    case METHOD:
      if (value == null) {
        unsetMethod();
      } else {
        setMethod((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TENANT_DOMAIN:
      return getTenantDomain();

    case USER_NAME:
      return getUserName();

    case INSTANCE_EN_NAME:
      return getInstanceEnName();

    case METHOD:
      return getMethod();

    case URL:
      return getUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TENANT_DOMAIN:
      return isSetTenantDomain();
    case USER_NAME:
      return isSetUserName();
    case INSTANCE_EN_NAME:
      return isSetInstanceEnName();
    case METHOD:
      return isSetMethod();
    case URL:
      return isSetUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserPermission)
      return this.equals((UserPermission)that);
    return false;
  }

  public boolean equals(UserPermission that) {
    if (that == null)
      return false;

    boolean this_present_tenantDomain = true && this.isSetTenantDomain();
    boolean that_present_tenantDomain = true && that.isSetTenantDomain();
    if (this_present_tenantDomain || that_present_tenantDomain) {
      if (!(this_present_tenantDomain && that_present_tenantDomain))
        return false;
      if (!this.tenantDomain.equals(that.tenantDomain))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_instanceEnName = true && this.isSetInstanceEnName();
    boolean that_present_instanceEnName = true && that.isSetInstanceEnName();
    if (this_present_instanceEnName || that_present_instanceEnName) {
      if (!(this_present_instanceEnName && that_present_instanceEnName))
        return false;
      if (!this.instanceEnName.equals(that.instanceEnName))
        return false;
    }

    boolean this_present_method = true && this.isSetMethod();
    boolean that_present_method = true && that.isSetMethod();
    if (this_present_method || that_present_method) {
      if (!(this_present_method && that_present_method))
        return false;
      if (!this.method.equals(that.method))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UserPermission other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTenantDomain()).compareTo(other.isSetTenantDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTenantDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantDomain, other.tenantDomain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceEnName()).compareTo(other.isSetInstanceEnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceEnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceEnName, other.instanceEnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMethod()).compareTo(other.isSetMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.method, other.method);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserPermission(");
    boolean first = true;

    sb.append("tenantDomain:");
    if (this.tenantDomain == null) {
      sb.append("null");
    } else {
      sb.append(this.tenantDomain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instanceEnName:");
    if (this.instanceEnName == null) {
      sb.append("null");
    } else {
      sb.append(this.instanceEnName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("method:");
    if (this.method == null) {
      sb.append("null");
    } else {
      sb.append(this.method);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserPermissionStandardSchemeFactory implements SchemeFactory {
    public UserPermissionStandardScheme getScheme() {
      return new UserPermissionStandardScheme();
    }
  }

  private static class UserPermissionStandardScheme extends StandardScheme<UserPermission> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserPermission struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TENANT_DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tenantDomain = iprot.readString();
              struct.setTenantDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INSTANCE_EN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceEnName = iprot.readString();
              struct.setInstanceEnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.method = iprot.readString();
              struct.setMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserPermission struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tenantDomain != null) {
        oprot.writeFieldBegin(TENANT_DOMAIN_FIELD_DESC);
        oprot.writeString(struct.tenantDomain);
        oprot.writeFieldEnd();
      }
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.instanceEnName != null) {
        oprot.writeFieldBegin(INSTANCE_EN_NAME_FIELD_DESC);
        oprot.writeString(struct.instanceEnName);
        oprot.writeFieldEnd();
      }
      if (struct.method != null) {
        oprot.writeFieldBegin(METHOD_FIELD_DESC);
        oprot.writeString(struct.method);
        oprot.writeFieldEnd();
      }
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserPermissionTupleSchemeFactory implements SchemeFactory {
    public UserPermissionTupleScheme getScheme() {
      return new UserPermissionTupleScheme();
    }
  }

  private static class UserPermissionTupleScheme extends TupleScheme<UserPermission> {

    public void write(org.apache.thrift.protocol.TProtocol prot, UserPermission struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTenantDomain()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      if (struct.isSetInstanceEnName()) {
        optionals.set(2);
      }
      if (struct.isSetMethod()) {
        optionals.set(3);
      }
      if (struct.isSetUrl()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTenantDomain()) {
        oprot.writeString(struct.tenantDomain);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetInstanceEnName()) {
        oprot.writeString(struct.instanceEnName);
      }
      if (struct.isSetMethod()) {
        oprot.writeString(struct.method);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
    }

    public void read(org.apache.thrift.protocol.TProtocol prot, UserPermission struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.tenantDomain = iprot.readString();
        struct.setTenantDomainIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.instanceEnName = iprot.readString();
        struct.setInstanceEnNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.method = iprot.readString();
        struct.setMethodIsSet(true);
      }
      if (incoming.get(4)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
    }
  }

}


